// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// flatdisp
arma::vec flatdisp(arma::vec d, arma::vec m);
RcppExport SEXP sodi_flatdisp(SEXP dSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    arma::vec d = Rcpp::as<arma::vec >(dSEXP);
    arma::vec m = Rcpp::as<arma::vec >(mSEXP);
    arma::vec __result = flatdisp(d, m);
    return Rcpp::wrap(__result);
END_RCPP
}
// flatdisp2
arma::vec flatdisp2(arma::vec d, double m);
RcppExport SEXP sodi_flatdisp2(SEXP dSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    arma::vec d = Rcpp::as<arma::vec >(dSEXP);
    double m = Rcpp::as<double >(mSEXP);
    arma::vec __result = flatdisp2(d, m);
    return Rcpp::wrap(__result);
END_RCPP
}
// expdisp
arma::vec expdisp(arma::vec d, arma::vec m);
RcppExport SEXP sodi_expdisp(SEXP dSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    arma::vec d = Rcpp::as<arma::vec >(dSEXP);
    arma::vec m = Rcpp::as<arma::vec >(mSEXP);
    arma::vec __result = expdisp(d, m);
    return Rcpp::wrap(__result);
END_RCPP
}
// expdisp2
arma::vec expdisp2(arma::vec d, double m);
RcppExport SEXP sodi_expdisp2(SEXP dSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    arma::vec d = Rcpp::as<arma::vec >(dSEXP);
    double m = Rcpp::as<double >(mSEXP);
    arma::vec __result = expdisp2(d, m);
    return Rcpp::wrap(__result);
END_RCPP
}
// normdisp
arma::vec normdisp(arma::vec d, arma::vec m);
RcppExport SEXP sodi_normdisp(SEXP dSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    arma::vec d = Rcpp::as<arma::vec >(dSEXP);
    arma::vec m = Rcpp::as<arma::vec >(mSEXP);
    arma::vec __result = normdisp(d, m);
    return Rcpp::wrap(__result);
END_RCPP
}
// normdisp2
arma::vec normdisp2(arma::vec d, double m);
RcppExport SEXP sodi_normdisp2(SEXP dSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    arma::vec d = Rcpp::as<arma::vec >(dSEXP);
    double m = Rcpp::as<double >(mSEXP);
    arma::vec __result = normdisp2(d, m);
    return Rcpp::wrap(__result);
END_RCPP
}
// fatdisp
arma::vec fatdisp(arma::vec d, arma::vec m);
RcppExport SEXP sodi_fatdisp(SEXP dSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    arma::vec d = Rcpp::as<arma::vec >(dSEXP);
    arma::vec m = Rcpp::as<arma::vec >(mSEXP);
    arma::vec __result = fatdisp(d, m);
    return Rcpp::wrap(__result);
END_RCPP
}
// fatdisp2
arma::vec fatdisp2(arma::vec d, double m);
RcppExport SEXP sodi_fatdisp2(SEXP dSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    arma::vec d = Rcpp::as<arma::vec >(dSEXP);
    double m = Rcpp::as<double >(mSEXP);
    arma::vec __result = fatdisp2(d, m);
    return Rcpp::wrap(__result);
END_RCPP
}
// run_sodi_rcpp
List run_sodi_rcpp(DataFrame init, List parms, bool progress);
RcppExport SEXP sodi_run_sodi_rcpp(SEXP initSEXP, SEXP parmsSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    DataFrame init = Rcpp::as<DataFrame >(initSEXP);
    List parms = Rcpp::as<List >(parmsSEXP);
    bool progress = Rcpp::as<bool >(progressSEXP);
    List __result = run_sodi_rcpp(init, parms, progress);
    return Rcpp::wrap(__result);
END_RCPP
}
